apply plugin: 'application'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    ext.mainClass = 'rdftables.Main'
}

repositories {
    mavenCentral()
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
}

dependencies {

    ext.openCSVVersion = "3.9"
    compile ("com.opencsv:opencsv:$openCSVVersion"){
        exclude group: 'commons-logging', module: 'commons-logging'
    }

    ext.slf4jVersion = "1.7.25"
    compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"

    ext.jenaVersion = "3.8.0"
    //compile "org.apache.jena:apache-jena-libs:$jenaVersion"
    //Issue resolving apache-jena-libs in Maven projects. Use individual modules as provide jars.
    compile "org.apache.jena:jena-core:$jenaVersion"
    compile "org.apache.jena:jena-arq:$jenaVersion"
    compile "org.apache.jena:jena-iri:$jenaVersion"
    compile "org.apache.jena:jena-tdb:$jenaVersion"

    ext.logbackVersion = "1.2.3"
    testCompile "ch.qos.logback:logback-classic:$logbackVersion"

    ext.junitVersion = "4.12"
    testCompile "junit:junit:$junitVersion"
}

group = 'org.ntu'
version = '1.0.0'

apply plugin: 'maven-publish'
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

build.finalizedBy(publishToMavenLocal)

run {
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}
